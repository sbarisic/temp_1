@page "/login"
@using Microsoft.AspNetCore.SignalR.Client
@using Proj2.Code
@using Proj2.Data
@using System.Security.Claims;

@inject AuthStateProvider AuthStateProvider

<PageTitle>Login</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="card">
            <h5 class="card-header">Welcome, @LoggedInUsername</h5>
            <div class="card-body">
                <button class="btn btn-primary" @onclick="PerformLogout">Logout</button>
            </div>
        </div>
    </Authorized>

    <NotAuthorized>
        <div class="card">
            <h5 class="card-header">Login</h5>
            <div class="card-body">
                @if (ShowInvalidUsername) {
                    <div class="alert alert-danger" role="alert">
                        Invalid Username or Password
                    </div>
                }

                <div class="row mb-3">
                    <div class="form-group">
                        <label for="input_username" class="form-label">
                            Username
                        </label>

                        <div class="col-sm-10">
                            <input id="input_username" class="form-control" type="text" @bind="Username" />
                        </div>
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="form-group">
                        <label for="input_password" class="form-label">
                            Password
                        </label>

                        <div class="col-sm-10">
                            <input id="input_password" class="form-control" type="password" @bind="Password" size="50" />
                        </div>
                    </div>
                </div>

                <button class="btn btn-primary" @onclick="PerformLogin">Login</button>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>


@code {
    string Username;
    string Password;

    bool ShowInvalidUsername = false;

    string LoggedInUsername {
        get {
            return AuthStateProvider.GetDbUser()?.Username;
        }
    }

    protected override void OnInitialized() {
        Console.WriteLine("Login OnInitialized");
    }

    async Task PerformLogin() {
        ShowInvalidUsername = false;

        if (AuthStateProvider.Login(Username, Password, out AuthenticationState AuthState)) {
            AuthStateProvider.SetAuthenticationState(Task.FromResult(AuthState));
        } else
            ShowInvalidUsername = true;

        StateHasChanged();
    }

    async Task PerformLogout() {
        AuthStateProvider.SetAuthenticationState(null);
        StateHasChanged();
    }
}