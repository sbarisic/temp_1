@page "/login"
@using Microsoft.AspNetCore.SignalR.Client
@using Proj2.Code
@using Proj2.Data
@using System.Security.Claims;

@inject NavigationManager Navigation
@inject ItemDataService ItemService
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHostEnvironmentAuthenticationStateProvider HostAuthentication

<PageTitle>Login</PageTitle>

<AuthorizeView>
	<Authorized>
		<button class="btn btn-primary" @onclick="PerformLogout">Logout</button>
	</Authorized>

	<NotAuthorized>
		@if (ShowInvalidUsername) {
			<div class="alert alert-danger" role="alert">
				Invalid Username or Password
			</div>
		}

		<div class="row mb-3">
			<div class="form-group">
				<label for="input_username" class="form-label">
					Username
				</label>

				<div class="col-sm-10">
					<input id="input_username" class="form-control" type="text" @bind="Username" />
				</div>
			</div>
		</div>

		<div class="row mb-3">
			<div class="form-group">
				<label for="input_password" class="form-label">
					Password
				</label>

				<div class="col-sm-10">
					<input id="input_password" class="form-control" type="password" @bind="Password" size="50" />
				</div>
			</div>
		</div>

		<button class="btn btn-primary" @onclick="PerformLogin">Login</button>
	</NotAuthorized>
</AuthorizeView>


@code {
	string Username;
	string Password;

	bool ShowInvalidUsername = false;

	protected override void OnInitialized() {
		Console.WriteLine("Login OnInitialized");
	}



	async Task PerformLogin() {
		ShowInvalidUsername = false;
		AuthStateProvider Auth = HostAuthentication as AuthStateProvider;

		if (Auth == null)
			return;

		if (Auth.Login(Username, Password, out AuthenticationState AuthState))
		{
			Auth.SetAuthenticationState(Task.FromResult(AuthState));
		}
		else
			ShowInvalidUsername = true;

		StateHasChanged();
	}

	async Task PerformLogout() {
		HostAuthentication.SetAuthenticationState(null);
		StateHasChanged();

	}
}