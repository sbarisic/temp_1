@page "/login"
@using Microsoft.AspNetCore.SignalR.Client
@using Proj2.Code
@using System.Security.Claims;

@inject NavigationManager Navigation
@inject AuthStateProvider AuthStateProvider

<PageTitle>Login</PageTitle>

<AuthorizeView>
	<Authorized>
		<div class="card">
			<h5 class="card-header">Welcome, @LoggedInUsername</h5>
			<div class="card-body">
				<button class="btn btn-primary" @onclick="PerformLogout">Logout</button>
			</div>
		</div>
	</Authorized>

	<Authorizing>
		<div class="card">
			<h5 class="card-header">Please Wait</h5>
		</div>
	</Authorizing>

	<NotAuthorized>
		<div class="card">
			<h5 class="card-header">Login</h5>
			<div class="card-body">
				@if (ShowInvalidUsername) {
					<div class="alert alert-danger" role="alert">
						Invalid Username or Password
					</div>
				}

				<div class="row mb-3">
					<div class="form-group">
						<label for="input_username" class="form-label">
							Username
						</label>

						<div class="col-sm-10">
							<input id="input_username" class="form-control" type="text" @bind="Username" />
						</div>
					</div>
				</div>

				<div class="row mb-3">
					<div class="form-group">
						<label for="input_password" class="form-label">
							Password
						</label>

						<div class="col-sm-10">
							<input id="input_password" class="form-control" type="password" @bind="Password" size="50" />
						</div>
					</div>
				</div>

				<button class="btn btn-primary" @onclick="PerformLogin">Login</button>
			</div>
		</div>
	</NotAuthorized>
</AuthorizeView>


@code {
	string Username;
	string Password;

	bool ShowInvalidUsername = false;

	string LoggedInUsername {
		get {
			return AuthStateProvider.GetDbUser()?.Username;
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender) {
		/*AuthenticationState AuthState = await AuthStateProvider.GetAuthenticationStateAsync();

		if (AuthState != null && !(AuthState.User?.Identity?.IsAuthenticated ?? false))
			AuthState = null;


		if (AuthState == null) {
			SessionStorageUser SessionUser = await AuthStateProvider.LoadSessionUser();

			if (AuthStateProvider.Login(SessionUser, out AuthState)) {
				Console.WriteLine("Logged in via SessionUser");

				AuthStateProvider.SetAuthenticationState(Task.FromResult(AuthState));
				StateHasChanged();
			}
		}*/

		await AuthStateProvider.TryLoginFromSession();
	}

	async Task PerformLogin() {
		ShowInvalidUsername = false;

		AuthenticationState AuthState = null;
		SessionStorageUser SessionUser = null;

		if (AuthStateProvider.Login(Username, Password, out AuthState, out SessionUser)) {
			Console.WriteLine("Logged in via Username/Password");
			AuthStateProvider.SetAuthenticationState(Task.FromResult(AuthState));
			AuthStateProvider.SaveSessionUser(SessionUser);

			StateHasChanged();
			Navigation.NavigateTo("/");
		} else
			ShowInvalidUsername = true;
	}

	async Task PerformLogout() {
		AuthStateProvider.SetAuthenticationState(null);
		StateHasChanged();
	}
}