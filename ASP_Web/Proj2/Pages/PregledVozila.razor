@page "/pregled_vozila"

@using Microsoft.AspNetCore.SignalR.Client
@using Proj2.Database
@using Proj2.Code
@using System.Collections.Specialized
@using System.Linq
@using Blazored.Modal
@using Blazored.Modal.Services

@inject AuthStateProvider AuthStateProvider
@inject NavigationManager Navigation

@implements IAsyncDisposable


<PageTitle>Pregled Vozila</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (CurrentVehicle != null) {
            @* Uprava i informacije o uopravi *@

            <div class="card">
                <div class="card-body">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col">
                                <h4 class="card-title">@CurrentVehicle.Name</h4>
                            </div>
                        </div>

                        @if (HasError || HasWarning) {
                            <div class="row my-1">
                                <div class="col">
                                    @if (HasError) {
                                        <span class="badge bg-danger mx-1">ERROR</span>
                                    }

                                    @if (HasWarning) {
                                        <span class="badge bg-warning mx-1">WARNING</span>
                                    }
                                </div>
                            </div>
                        }


                        <div class="row mb-2 my-2">
                            <div class="col">
                                @{
                                    var ButtonPaddingX = "mx-1";
                                }

                                @if (OnEditDescriptionEnabled) {
                                    <button class="btn btn-sm btn-outline-primary @ButtonPaddingX" @onclick="@(e => OnEditDescription())">Uredi Opis</button>
                                }

                                @if (OnAssignVehicleToAdministrationEnabled) {
                                    <button class="btn btn-sm btn-outline-success @ButtonPaddingX" @onclick="@OnAssignVehicleToAdministration">Pridruži vozilo upravi</button>
                                }

                                @if (OnAddEquipmentEnabled) {
                                    <button class="btn btn-sm btn-outline-success @ButtonPaddingX" @onclick="@OnAddEquipment">Dodaj Opremu</button>
                                }

                                @if (OnGenerateAPIKeyEnabled) {
                                    <button class="btn btn-sm btn-outline-dark @ButtonPaddingX" @onclick="@OnGenerateAPIKey">Generiraj APIKey</button>
                                }

                                @if (OnViewAdministrationEnabled) {
                                    <button class="btn btn-sm btn-outline-primary @ButtonPaddingX" @onclick="@(e=> OnViewAdministration(CurrentVehicleAdmin))">Pregled Uprave</button>
                                }
                            </div>
                        </div>

                        <div class="row my-2">
                            <div class="col">
                                <div class="input-group">
                                    <span class="input-group-text">API Key</span>
                                    <input class="form-control" type="text" value="@(GetAPIKey() ?? "None")" readonly>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            @if (CurrentVehicleAdmin != null) {
                                <div class="col">
                                    <strong>Uprava: </strong>@CurrentVehicleAdmin.Name
                                </div>

                                @*<div class="col">
                        <button class="btn btn-sm btn-outline-primary" @onclick="@(e=> OnPregledUprave(CurrentVehicleAdmin))">Pregled Uprave</button>
                        </div>*@
                            } else {
                                <div class="col">
                                    <string>
                                        Vozilo nije pridruženo upravi
                                    </string>
                                </div>
                            }
                        </div>

                        <div class="row">
                            <div class="col">
                                @*<AddressView CurrentAddress="CurrentVehicle.Address" />*@

                                <strong>Tablica: </strong>@CurrentVehicle.LicensePlate
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @if (CurrentVehicle.Equipment.Count > 0) {
                <table class="table table-striped table-hover mt-4">
                    <thead>
                        <tr>
                            <th scope="col">ID</th>
                            <th scope="col">Last Update</th>
                            <th scope="col">Naziv</th>
                            <th scope="col">Pregled</th>
                            <th scope="col">Error / Warning</th>
                            <th scope="col">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (DbVehicleEquipment Op in CurrentVehicle.Equipment) {
                            var TableRowStyle = "";

                            //GetVoziloTableRowStyle(V, out string TableRowStyle, out bool HasError, out bool HasWarning);

                            <tr class="@TableRowStyle">
                                <td>@Op.ID</td>
                                <td>@GetLastUpdate(Op)</td>
                                <td>@Op.Name</td>
                                <td>@GetLastValue(Op)</td>

                                <td>
                                    @if (HasError) {
                                        <span class="badge bg-danger mx-1">ERROR</span>
                                    }

                                    @if (HasWarning) {
                                        <span class="badge bg-warning mx-1">WARNING</span>
                                    }
                                </td>

                                <td>
                                    <div class="container-fluid">
                                        <div class="row">
                                            <div class="col">
                                                <div class="float-end">
                                                    @*<button class="btn btn-sm btn-outline-secondary mx-1" @onclick="@(e=> OnPregledVozila(V))">Pregled Vozila</button>*@

                                                    <button class="btn btn-sm btn-outline-danger mx-1" @onclick="@(e=> OnDeleteEquipment(Op))">Obriši</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

            @if (RawJson != null) {
                <h5>JSON Data</h5>

                @foreach (DbJsonLog JsonLog in RawJson) {
                    (string, object)[] KVs = JsonUtils.GetKeyValues(JsonLog).ToArray();

                    <table class="table table-borderless table-bordered table-sm my-0">
                        <thead>
                            <tr>
                                @foreach (var KV in KVs) {
                                    if (KV.Item1 == "APIKey")
                                        continue;

                                    <th scope="col" class="col-1">@KV.Item1</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                @foreach (var KV in KVs) {
                                    if (KV.Item1 == "APIKey")
                                        continue;

                                    <td>@(KV.Item2?.ToString() ?? "NULL")</td>
                                }
                            </tr>
                        </tbody>
                    </table>
                }
            }

        } else {
            <p><em>Loading...</em></p>
        }

    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public IModalService Modal {
        get; set;
    }

    [CascadingParameter]
    public MainLayout Layout {
        get; set;
    }

    bool OnEditDescriptionEnabled {
        get; set;
    }

    bool OnAssignVehicleToAdministrationEnabled {
        get; set;
    }

    bool OnAddEquipmentEnabled {
        get; set;
    }

    bool OnGenerateAPIKeyEnabled {
        get; set;
    }

    bool OnViewAdministrationEnabled {
        get; set;
    }

    HubConnection HubCon;

    public bool IsConnected {
        get {
            if (HubCon == null)
                return false;

            return HubCon.State == HubConnectionState.Connected;
        }
    }

    NameValueCollection Query = null;
    DatabaseContext DbCtx;
    string ViewID;

    DbVehicle CurrentVehicle = null;
    DbAdministration CurrentVehicleAdmin = null;

    DbJsonLog[] RawJson = null;

    bool HasError = false;
    bool HasWarning = false;

    protected override void OnInitialized() {
        Query = Query ?? Utils.ParseQuery(Navigation.Uri);
        ViewID = Query.Get("i") ?? "";

        DbCtx = new DatabaseContext();

        ReloadData();
        Layout?.SetNaviText("Pregled Vozila");
    }


    protected override async Task OnInitializedAsync() {
        HubCon = new HubConnectionBuilder().WithUrl(Navigation.ToAbsoluteUri("/comhub")).Build();

        HubCon.On("OnStateHasChanged", () => {
            Console.WriteLine("State has changed!");
            ReloadData();
            InvokeAsync(StateHasChanged);
        });

        await HubCon.StartAsync();
    }

    void ReloadData() {
        if (!string.IsNullOrEmpty(ViewID)) {
            //CurrentVehicle = Structures.Uprave.Where(U => U.ID == ViewID).FirstOrDefault();

            CurrentVehicle = DbCtx.GetVehicle(ViewID, true);

            //CurrentVehicle = new Vozilo("Test Vozilo", "BJ000SB");
            //CurrentVehicle.Oprema.Add(new OpremaVozila("Battery 1"));
            //CurrentVehicle.Oprema.Add(new OpremaVozila("Battery 2"));


            if (CurrentVehicle != null) {
                HasError = CurrentVehicle.HasErrors();
                HasWarning = CurrentVehicle.HasWarnings();

                CurrentVehicleAdmin = DbCtx.GetAdministrationForVehicle(CurrentVehicle);


                OnEditDescriptionEnabled = DbCtx.HasPermission(AuthStateProvider, DbPermission.PermissionNames.EDIT_VEHICLE_DETAILS, CurrentVehicle);
                OnAssignVehicleToAdministrationEnabled = DbCtx.HasPermission(AuthStateProvider, DbPermission.PermissionNames.ADMIN);
                OnAddEquipmentEnabled = DbCtx.HasPermission(AuthStateProvider, DbPermission.PermissionNames.ADD_REMOVE_VEHICLE_EQUIPMENT, CurrentVehicle);
                OnGenerateAPIKeyEnabled = DbCtx.HasPermission(AuthStateProvider, DbPermission.PermissionNames.GENERATE_API_KEY, CurrentVehicle);

                //OnViewAdministrationEnabled = DbCtx.HasPermission(AuthStateProvider, DbPermission.PermissionNames.EDIT_VEHICLE_DETAILS, CurrentVehicle);
                OnViewAdministrationEnabled = true;

                RawJson = null;
                if (DbCtx.HasPermission(AuthStateProvider, DbPermission.PermissionNames.ADMIN)) {
                    RawJson = DbCtx.GetJsonLog(DbCtx.GetValidAPIKey(CurrentVehicle), 10);
                }
            }
        }
    }

    protected override void OnAfterRender(bool firstRender) {
        if (!AuthStateProvider.IsAuthenticated())
            Navigation.NavigateTo("/login");
    }

    async void OnEditDescription() {
        if (!OnEditDescriptionEnabled)
            return;

        EditModal.Field[] EditFields = new[] {
            new EditModal.Field("Naziv", CurrentVehicle.Name),
            new EditModal.Field("Tablica", CurrentVehicle.LicensePlate)
    };

        ModalResult Result = await Modal.Show<EditModal>("Opis Vozila", new ModalParameters().Add("Fields", EditFields)).Result;

        if (Result.Confirmed) {
            if (string.IsNullOrEmpty(EditFields[0].Value) || string.IsNullOrEmpty(EditFields[1].Value)) {
                return;
            }

            CurrentVehicle.Name = EditFields[0].Value;
            CurrentVehicle.LicensePlate = EditFields[1].Value;

            DbCtx.Commit();
            StateHasChanged();
        }
    }

    void OnViewAdministration(DbAdministration Up) {
        if (!OnViewAdministrationEnabled)
            return;

        Navigation.NavigateTo("/pregled_uprave?i=" + Up.ID);
    }

    async Task OnGenerateAPIKey() {
        if (!OnGenerateAPIKeyEnabled)
            return;

        if (CurrentVehicle == null)
            return;

        DbVehicle Veh = DbCtx.GetVehicle(CurrentVehicle.ID, false);
        ModalResult Result = await QueryModal.Show(Modal, "API Key", "Jeste li sigurni da želite generirati novi API Key?");

        if (Result.Confirmed) {
            DbCtx.InvalidateAllAPIKeysForVehicle(Veh);

            DbDeviceAPIKey APIKey = DbCtx.CreateNew<DbDeviceAPIKey>(null);
            APIKey.Vehicles.Add(Veh);

            DbCtx.Commit();
            StateHasChanged();
        }
    }

    async Task OnAddEquipment() {
        if (!OnAddEquipmentEnabled)
            return;

        if (CurrentVehicle == null)
            return;


        EditModal.Field[] EditFields = new[] {
                new EditModal.Field("Naziv", "Nova Oprema"),
                new EditModal.Field("Tip Opreme", new[]{
                    new KeyValuePair<string,string>("Akumulatori", DbEquipmentType.BATTERY.ToString()),
                    new KeyValuePair<string,string>("Pritisak", DbEquipmentType.PRESSURE.ToString())
                })
    };

        ModalResult Result = await Modal.Show<EditModal>("Dodaj Opremu", new ModalParameters().Add("Fields", EditFields)).Result;
        if (Result.Confirmed) {
            if (string.IsNullOrEmpty(EditFields[0].Value)) {
                return;
            }

            if (string.IsNullOrEmpty(EditFields[1].Value) || EditFields[1].Value == "0") {
                return;
            }

            DbVehicleEquipment NewEquipment = DbCtx.CreateNew<DbVehicleEquipment>(null, E => {
                E.Name = EditFields[0].Value;
                E.EquipmentType = Enum.Parse<DbEquipmentType>(EditFields[1].Value);
            });

            DbVehicle Veh = DbCtx.GetVehicle(CurrentVehicle.ID, false);
            Veh.Equipment.Add(NewEquipment);
            DbCtx.Commit();

            ReloadData();
            StateHasChanged();
        }
    }

    async Task OnAssignVehicleToAdministration() {
        if (!OnAssignVehicleToAdministrationEnabled)
            return;
    }

    void GetVoziloTableRowStyle(DbVehicle V, out string TableRowStyle, out bool HasError, out bool HasWarning) {
        TableRowStyle = "";
        HasError = V.HasErrors();
        HasWarning = V.HasWarnings();

        if (HasError) {
            TableRowStyle = "table-danger";
        } else if (HasWarning) {
            TableRowStyle = "table-warning";
        }
    }

    string GetAPIKey() {
        DbDeviceAPIKey APIKey = DbCtx.GetValidAPIKey(CurrentVehicle);

        if (APIKey == null)
            return null;

        return APIKey.APIKey;
    }

    DbEquipmentValues GetLastEqipmentValue(DbVehicleEquipment Eq) {
        return Eq.Values.OrderByDescending(V => V.ID).FirstOrDefault();
    }

    string GetLastValue(DbVehicleEquipment Eq) {
        DbEquipmentValues Val = GetLastEqipmentValue(Eq);

        if (Val == null)
            return "NONE";

        string Suffix = "";

        switch (Eq.EquipmentType) {
            case DbEquipmentType.BATTERY:
                Suffix = " V";
                break;

            case DbEquipmentType.PRESSURE:
                Suffix = " bar";
                break;

            default:
                throw new Exception("Unknown EquipmentType " + Eq.EquipmentType);
        }

        return Val.FloatValue.ToString() + Suffix;
    }

    string GetLastUpdate(DbVehicleEquipment Eq) {
        DbEquipmentValues EqValue = GetLastEqipmentValue(Eq);

        if (EqValue == null)
            return "";

        return Utils.FormatDateTime(EqValue.Local_CreatedOn);
    }

    public async ValueTask DisposeAsync() {
        DbCtx.Dispose();

        if (HubCon != null) {
            await HubCon.DisposeAsync();
        }
    }

    async Task OnDeleteEquipment(DbVehicleEquipment Eq) {
        if (!OnAddEquipmentEnabled)
            return;

        ModalResult Result = await QueryModal.Show(Modal, "Obriši Opremu", string.Format("Jeste li sigurni da želite obrisati \"{0}\"", Eq.Name));

        if (Result.Confirmed) {
            DbCtx.DeleteEntity(Eq);

            ReloadData();
            StateHasChanged();
        }
    }
}