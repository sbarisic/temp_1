@page "/pregled_vozila"

@using Microsoft.AspNetCore.SignalR.Client
@using Proj2.Database
@using Proj2.Code
@using System.Collections.Specialized
@using System.Linq
@using Blazored.Modal
@using Blazored.Modal.Services

@inject AuthStateProvider AuthStateProvider
@inject NavigationManager Navigation

@implements IDisposable


<PageTitle>Pregled Vozila</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (CurrentVehicle != null) {
            @* Uprava i informacije o uopravi *@

            <div class="card">
                <div class="card-body">
                    <div class="container">
                        <div class="row">
                            <div class="col">
                                <h4 class="card-title">@CurrentVehicle.Name</h4>
                            </div>
                        </div>

                        @if (HasError || HasWarning) {
                            <div class="row my-1">
                                <div class="col">
                                    @if (HasError) {
                                        <span class="badge bg-danger mx-1">ERROR</span>
                                    }

                                    @if (HasWarning) {
                                        <span class="badge bg-warning mx-1">WARNING</span>
                                    }
                                </div>
                            </div>
                        }


                        <div class="row mb-2 my-2">
                            <div class="col">
                                @*<button class="btn btn-sm btn-outline-primary" @onclick="@(e => OnEditDescription())">Uredi Opis</button>*@
                                <button class="btn btn-sm btn-outline-success">Pridruži vozilo upravi</button>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col">
                                @*<AddressView CurrentAddress="CurrentVehicle.Address" />*@

                                Status: OK
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @if (CurrentVehicle.Equipment.Count > 0) {
                <table class="table table-striped table-hover mt-4">
                    <thead>
                        <tr>
                            <th scope="col">Naziv</th>
                            <th scope="col">Pregled</th>
                            <th scope="col">Error / Warning</th>
                            <th scope="col">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (DbVehicleEquipment Op in CurrentVehicle.Equipment) {
                            var TableRowStyle = "";

                            //GetVoziloTableRowStyle(V, out string TableRowStyle, out bool HasError, out bool HasWarning);

                            <tr class="@TableRowStyle">
                                <td>@Op.Name</td>
                                <td>0 V</td>

                                <td>
                                    @if (HasError) {
                                        <span class="badge bg-danger mx-1">ERROR</span>
                                    }

                                    @if (HasWarning) {
                                        <span class="badge bg-warning mx-1">WARNING</span>
                                    }
                                </td>

                                <td>
                                    <div class="container">
                                        <div class="row">
                                            <div class="col">
                                                <div class="float-end">
                                                    @*<button class="btn btn-sm btn-outline-secondary mx-1" @onclick="@(e=> OnPregledVozila(V))">Pregled Vozila</button>

                                        <button class="btn btn-sm btn-outline-danger mx-1">Obriši</button>*@
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

        } else {
            <p><em>Loading...</em></p>
        }

    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public IModalService Modal {
        get; set;
    }

    NameValueCollection Query = null;
    DatabaseContext DbCtx;

    DbVehicle CurrentVehicle = null;
    bool HasError = false;
    bool HasWarning = false;

    void GetVoziloTableRowStyle(DbVehicle V, out string TableRowStyle, out bool HasError, out bool HasWarning) {
        TableRowStyle = "";
        HasError = V.HasErrors();
        HasWarning = V.HasWarnings();

        if (HasError) {
            TableRowStyle = "table-danger";
        } else if (HasWarning) {
            TableRowStyle = "table-warning";
        }
    }

    protected override void OnInitialized() {
        Query = Query ?? Utils.ParseQuery(Navigation.Uri);
        DbCtx = new DatabaseContext();

        string ViewID = Query.Get("i") ?? "";

        if (!string.IsNullOrEmpty(ViewID)) {
            //CurrentVehicle = Structures.Uprave.Where(U => U.ID == ViewID).FirstOrDefault();

            CurrentVehicle = DbCtx.GetVehicle(ViewID);

            //CurrentVehicle = new Vozilo("Test Vozilo", "BJ000SB");
            //CurrentVehicle.Oprema.Add(new OpremaVozila("Battery 1"));
            //CurrentVehicle.Oprema.Add(new OpremaVozila("Battery 2"));


            if (CurrentVehicle != null) {
                HasError = CurrentVehicle.HasErrors();
                HasWarning = CurrentVehicle.HasWarnings();
            }
        }
    }

    protected override void OnAfterRender(bool firstRender) {
        if (!AuthStateProvider.IsAuthenticated())
            Navigation.NavigateTo("/login");
    }

    async void OnEditDescription() {
        /*EditModal.EditModalField[] EditFields = new[] {
            new EditModal.EditModalField(){ Name = "Street", Value = CurrentVehicle.Address.Street },
            new EditModal.EditModalField(){ Name = "City", Value = CurrentVehicle.Address.City },
            new EditModal.EditModalField(){ Name = "Region", Value = CurrentVehicle.Address.Region },
            new EditModal.EditModalField(){ Name = "Postal Code", Value = CurrentVehicle.Address.PostalCode },
            new EditModal.EditModalField(){ Name = "Phone Number", Value = CurrentVehicle.Address.PhoneNumber }
    };

        ModalResult Result = await Modal.Show<EditModal>("Uredi Opis", new ModalParameters().Add("Fields", EditFields)).Result;
        if (Result.Confirmed) {
            CurrentVehicle.Address.Street = EditFields[0].Value;
            CurrentVehicle.Address.City = EditFields[1].Value;
            CurrentVehicle.Address.Region = EditFields[2].Value;
            CurrentVehicle.Address.PostalCode = EditFields[3].Value;
            CurrentVehicle.Address.PhoneNumber = EditFields[4].Value;
            OnSaveDescription();
        }*/
    }

    void OnSaveDescription() {
        StateHasChanged();
    }

    public void Dispose() {
        DbCtx.Dispose();
    }
}