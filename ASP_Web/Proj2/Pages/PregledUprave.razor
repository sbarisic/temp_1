@page "/pregled_uprave"

@using Microsoft.AspNetCore.SignalR.Client
@using Proj2.Database
@using Proj2.Code
@using System.Collections.Specialized
@using System.Linq
@using Blazored.Modal
@using Blazored.Modal.Services

@inject AuthStateProvider AuthStateProvider
@inject NavigationManager Navigation

@implements IDisposable


<PageTitle>Pregled Uprave</PageTitle>

<AuthorizeView>
	<Authorized>
		@if (CurrentUprava != null) {
			@* Uprava i informacije o uopravi *@

			<div class="card">
				<div class="card-body">
					<div class="container">
						<div class="row">
							<div class="col">
								<h4 class="card-title">@CurrentUprava.Name</h4>
							</div>
						</div>

						@if (HasError || HasWarning) {
							<div class="row my-1">
								<div class="col">
									@if (HasError) {
										<span class="badge bg-danger mx-1">ERROR</span>
									}

									@if (HasWarning) {
										<span class="badge bg-warning mx-1">WARNING</span>
									}
								</div>
							</div>
						}


						<div class="row mb-2 my-2">
							<div class="col">
								<button class="btn btn-sm btn-outline-primary" @onclick="@(e => OnEditDescription())">Uredi Opis</button>
								<button class="btn btn-sm btn-outline-success" @onclick="@(e => OnAddVehicle())">Dodaj Vozilo</button>
							</div>
						</div>

						<div class="row">
							<div class="col">
								<AddressView CurrentAddress="CurrentUprava.Address" />
							</div>
						</div>
					</div>
				</div>
			</div>

			@if (CurrentUprava.Vozila.Count > 0) {
				<table class="table table-striped table-hover mt-4">
					<thead>
						<tr>
							<th scope="col">Vozilo</th>
							<th scope="col">Tablica</th>
							<th scope="col">Error / Warning</th>
							<th scope="col"></th>
						</tr>
					</thead>
					<tbody>
						@foreach (Vozilo V in CurrentUprava.Vozila) {
							GetVoziloTableRowStyle(V, out string TableRowStyle, out bool HasError, out bool HasWarning);

							<tr class="@TableRowStyle">
								<td>@V.Name</td>
								<td>@V.Tablica</td>

								<td>
									@if (HasError) {
										<span class="badge bg-danger mx-1">ERROR</span>
									}

									@if (HasWarning) {
										<span class="badge bg-warning mx-1">WARNING</span>
									}
								</td>

								<td><button class="btn btn-sm float-end btn-outline-secondary" @onclick="@(e=> OnPregledVozila(V))">Pregled Vozila</button></td>
							</tr>
						}
					</tbody>
				</table>
			}

		} else {
			<p><em>Loading...</em></p>
		}

	</Authorized>
</AuthorizeView>

@code {
	[CascadingParameter]
	public IModalService Modal {
		get; set;
	}

	NameValueCollection Query = null;
	DatabaseContext DbCtx;

	Uprava CurrentUprava = null;
	bool HasError = false;
	bool HasWarning = false;

	void GetVoziloTableRowStyle(Vozilo V, out string TableRowStyle, out bool HasError, out bool HasWarning) {
		TableRowStyle = "";
		HasError = V.HasErrors();
		HasWarning = V.HasWarnings();

		if (HasError) {
			TableRowStyle = "table-danger";
		} else if (HasWarning) {
			TableRowStyle = "table-warning";
		}
	}

	protected override void OnInitialized() {
		Query = Query ?? Utils.ParseQuery(Navigation.Uri);
		DbCtx = new DatabaseContext();

		string ViewID = Query.Get("i") ?? "";

		if (!string.IsNullOrEmpty(ViewID)) {
			CurrentUprava = Structures.Uprave.Where(U => U.ID == ViewID).FirstOrDefault();

			if (CurrentUprava != null) {
				HasError = CurrentUprava.HasErrors();
				HasWarning = CurrentUprava.HasWarnings();


			}
		}
	}

	protected override void OnAfterRender(bool firstRender) {
		if (!AuthStateProvider.IsAuthenticated())
			Navigation.NavigateTo("/login");

		Console.WriteLine("Query: {0}", Query);
	}

	void OnPregledVozila(Vozilo V) {
		Navigation.NavigateTo("/pregled_vozila?i=" + V.ID);
	}

	async void OnAddVehicle() {
		EditModal.EditModalField[] EditFields = new[] {
				new EditModal.EditModalField(){ Name = "Naziv", Value = "Nema Naziva" },
				new EditModal.EditModalField(){ Name = "Tablica", Value = "" }
};

		ModalResult Result = await Modal.Show<EditModal>("Dodaj Vozilo", new ModalParameters().Add("Fields", EditFields)).Result;
		if (Result.Confirmed) {
			if (string.IsNullOrEmpty(EditFields[1].Value)) {
				return;
			}

			Vozilo NewVehicle = new Vozilo(EditFields[0].Value, EditFields[1].Value);
			CurrentUprava.Vozila.Add(NewVehicle);

			StateHasChanged();
		}
	}

	async void OnEditDescription() {
		EditModal.EditModalField[] EditFields = new[] {
			new EditModal.EditModalField(){ Name = "Street", Value = CurrentUprava.Address.Street },
			new EditModal.EditModalField(){ Name = "City", Value = CurrentUprava.Address.City },
			new EditModal.EditModalField(){ Name = "Region", Value = CurrentUprava.Address.Region },
			new EditModal.EditModalField(){ Name = "Postal Code", Value = CurrentUprava.Address.PostalCode },
			new EditModal.EditModalField(){ Name = "Phone Number", Value = CurrentUprava.Address.PhoneNumber }
	};

		ModalResult Result = await Modal.Show<EditModal>("Uredi Opis", new ModalParameters().Add("Fields", EditFields)).Result;
		if (Result.Confirmed) {
			CurrentUprava.Address.Street = EditFields[0].Value;
			CurrentUprava.Address.City = EditFields[1].Value;
			CurrentUprava.Address.Region = EditFields[2].Value;
			CurrentUprava.Address.PostalCode = EditFields[3].Value;
			CurrentUprava.Address.PhoneNumber = EditFields[4].Value;
			OnSaveDescription();
		}
	}

	void OnSaveDescription() {
		StateHasChanged();
	}

	public void Dispose() {
		DbCtx.Dispose();
	}
}