@page "/fetchdata"
@using Microsoft.AspNetCore.SignalR.Client
@using Proj2.Code
@using Proj2.Data

@inject NavigationManager Navigation
@inject ItemDataService ItemService

@implements IAsyncDisposable

<PageTitle>Items</PageTitle>


<h1>Items</h1>

@if (!IsConnected) {
	<p><em>Loading...</em></p>
} else {
	<table class="table table-striped table-light">
		<thead>
			<tr>
				<th>TimeStamp</th>
				<th>Name</th>
				<th>Voltage</th>
				<th>Description</th>
				<th>Action</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var Itm in DisplayItems) {
				<tr>
					<td>@Itm.TimeStamp.ToShortTimeString()</td>
					<td>@Itm.Name</td>
					<td>@(Itm.Voltage + " V")</td>
					<td>@Itm.Description</td>
					<td><button type="button" class="btn btn-sm btn-outline-success" @onclick="@(e=> ActivateItem(Itm))">Activate</button></td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	HubConnection HubCon;
	List<ItemData> DisplayItems;

	public bool IsConnected {
		get {
			if (HubCon == null || DisplayItems == null)
				return false;

			return HubCon.State == HubConnectionState.Connected;
		}
	}

	protected override async Task OnInitializedAsync() {
		if (DisplayItems == null)
			DisplayItems = new List<ItemData>();

		ReloadItems();

		HubCon = new HubConnectionBuilder().WithUrl(Navigation.ToAbsoluteUri("/comhub")).Build();
		HubCon.On("OnStateHasChanged", OnStateHasChanged);
		await HubCon.StartAsync();
	}

	void ReloadItems() {
		DisplayItems.Clear();
		DisplayItems.AddRange(ItemService.GetAllItems());
	}

	void OnStateHasChanged() {
		ReloadItems();
		InvokeAsync(StateHasChanged);
	}

	public async ValueTask DisposeAsync() {
		if (HubCon != null) {
			await HubCon.DisposeAsync();
		}
	}

	void ActivateItem(ItemData Itm) {
		Console.WriteLine(string.Format("Activating {0} - Current voltage: {1}", Itm.Name, Itm.Voltage));
	}
}