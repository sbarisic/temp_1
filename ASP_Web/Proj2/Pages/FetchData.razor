@page "/fetchdata"
@using Microsoft.AspNetCore.SignalR.Client
@using Proj2.Code
@using Proj2.Data

@inject NavigationManager Navigation
@inject ItemDataService ItemService

@implements IAsyncDisposable

<PageTitle>Items</PageTitle>


<h1>Items</h1>

@if (Items == null) {
	<p><em>Loading...</em></p>
} else {
	<table class="table table-striped table-light">
		<thead>
			<tr>
				<th>TimeStamp</th>
				<th>Name</th>
				<th>Voltage</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var Itm in Items) {
				<tr>
					<td>@Itm.TimeStamp.ToShortTimeString()</td>
					<td>@Itm.Name</td>
					<td>@(Itm.Voltage + " V")</td>
					<td>@Itm.Description</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	HubConnection HubCon;
	List<ItemData> Items;

	protected override async Task OnInitializedAsync() {
		Items = new List<ItemData>(await ItemService.GetAllItemsAsync());

		HubCon = new HubConnectionBuilder()
			.WithUrl(Navigation.ToAbsoluteUri("/comhub"))
			.Build();

		HubCon.On<ItemData>("ReceiveUpdateItemData", ReceiveUpdateItemData);
		await HubCon.StartAsync();
	}

	void ReceiveUpdateItemData(ItemData Item) {
		bool Updated = false;

		foreach (ItemData LocalItem in Items) {
			if (LocalItem.Name == Item.Name) {
				LocalItem.CopyFrom(Item);
				Updated = true;
			}
		}

		if (!Updated) {
			Items.Add(Item);
		}
		
		InvokeAsync(StateHasChanged);
	}

	public async ValueTask DisposeAsync() {
		if (HubCon != null) {
			await HubCon.DisposeAsync();
		}
	}
}
